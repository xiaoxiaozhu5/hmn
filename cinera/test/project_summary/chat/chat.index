---
location: "chat002"
number: "002"
title: "Asset Files and Installers"
markers:
"43.000": "What are the pros and cons of "baking" assets like images into your executable, rather than shipping them separately and loading them dynamically?"
"76.000": "Blackboard: The difference between storing assets in vs separately from an executable"
"269.000": "Blackboard: Packed files vs Separate files"
"515.000": "Once you return to coding episode streams, would you recommend new followers tune in, even though they haven't caught up with everything in the archive?"
"553.000": "I meant using the built in windows voice recognition stuff to program Handmade Hero"
"569.000": "Do you think you could create an in depth video / post on IOCP at some point in the near future? I am having a bit of trouble understanding their amazing-ness"
"594.000": "Good evening Sensei! I hope your hand is feeling better today! I salute your positiveness in handling the situation. I would totally freak out if that happens to me, without programming I'm practically useless"
"694.000": "After fiction technology, what are some candidates for another problem / project worth your time?"
"730.000": "Will there ever be good realtime global illumination"
"776.000": "Why are companies so hard with junior developers in the interview process. Make it very difficult for inexperienced coders to get a job"
"824.000": "Is Martins still putting the videos up on BitTorrent Sync?"
"868.000": "You could try something like chi gung (Chinese health exercise) which could help with RSI and creating a good posture. Just a thought"
"899.000": "Do you ever wonder if a game you're playing will turn into Frog Fractions 2 with a crazy twist? I find myself wondering this often"
"910.000": "For some reason I remember you saying there were changes coming to the handmadehero.org forums. Did I remember correctly, and do you have any updates on the current status?"
"969.000": "What is that Intel Architecture thing on your desktop?"
"1140.000": "Q: Have you ever been to GDC?"
"1171.000": "Q: Why is audio such a disaster even on windows?"
"1221.000": "Don't installer programs typically bake information about the program they are installing into the exe? Is that how installers are typically done on the Windows?"
"1244.000": "Blackboard: Making an installer"
"1473.000": "Is making an interesting "game AI" considered a very hard problem or are people just lazy? I see most games come with terrible AI these days; why does it seem we're going backwards?"
"1521.000": "Is there any difference between exe installers and msi installers?"
"1587.000": "I'm no doctor but couldn't be that the wrist braces you use are actually making your muscles in that part weaker?"
"1646.000": "Possibly too big of a question, but is there an ideal known strategy to make a natural language processing system, e.g. you type English and that parses into actions then enacted by your program?"
"1737.000": "We could do an experiment where you tell us what to make and you review?"
"1762.000": "Have you spoken to Chris Crawford about IF?"
"1805.000": "How would you describe your learning curve over your decades of programming experience? For me, no matter how long I do something, I always seem to look back to where I was a year before, and feel like that was a much less competent version of myself"
"1908.000": "Have you played Starship Titanic? I thought that had quite a cool interactive conversation thing, especially for a 1998 game"
"1936.000": "Related to the question about embedded resources vs external ones: I had an idea of using a meta program to load a model during a preprocessor step and spits out the code that assigns the vertices values directly to an array, i.e. void LoadModel(v3 *Vertices) { Vertices[0].x = ...; Vertices[0].y = ....; } etc. Do you think that's useful in any way?"
"2024.000": "Might be jumping the gun since we haven't gotten to shaders, but I'm having trouble with them in my renderer. Am I supposed to save the attributes and shader programs across draw calls, or reinitialize each time? Seems like you went to a lot of trouble to remove the transient arena from the OpenGL renderer so things can't be pushed from there"
"2143.000": "What PDF reader is that?"
"2157.000": "Why is it in C++ that people always like and do many compilation units, one for each .cpp file? Is it just because it's how visual studio build works?"
"2234.000": "Won't Anti-Viruses get finicky with you writing to the end of an exe? Doesn't that also break code signing?"
"2295.000": "Is it practical to roll your own C runtime? From what I have gathered there seems to be a lot of problems with that sort of thing. Of course M$ has the audacity to ship incompatible versions of the CRT on different versions of Windows. Any workarounds for this?"
"2335.000": "Have you considered guest programmers for the interim?"
"2371.000": "That's it for tonight"
---
location: "chat003"
number: "003"
title: "Resources, Files and DRM"
markers:
"26.000": "Recap and set the stage for the day"
"72.000": "Blackboard: Conceptual resource vs Physical resource"
"208.000": "Blackboard: Conceptual resource"
"312.000": "Blackboard: Physical resource"
"599.000": "Q: Why would a game ever need more than one file?"
"775.000": "Blackboard: Spritesheets and swapping"
"927.000": "Blackboard: API / filesize limits"
"1087.000": "Blackboard: Memory mapped file"
"1820.000": "Is there any way to reverse engineer a pack file and figure out how it's laid out, like Resident Evil MD1 files on PlayStation?"
"1912.000": "Why do you think that memory mapped files are a bad idea?"
"1931.000": "Does Steam allow to patch files instead of overwrite them? So could one patch the one data file, having an update that is not a practically full reinstall?"
"2033.000": "Any ideas or thoughts about those anti-piracy ideas they implemented in GTA, Serious Sam and other games where the game trolls the players and becomes super hard and even impossible to beat if the cracked version is used?"
"2180.000": "I've been thinking about how to implement water reflections in a top down 2D game. What do you think about using render layers like: (bottom -> top) water, reflection, land, shadows, objects / things, then combining the layers?"
"2210.000": "Do you have any idea for hardware architecture design that could improve performance for games?"
"2322.000": "Under development and before the release of a PC game, are there good practices for making sure that a game will work on an end user's machine and not get bugs caused by users' hardware?"
"2487.000": "Do you have to go through the Steam Greenlight process in Steam for your game? Do you think its a good idea?"
"2541.000": "If you had an easy way to write whatever code you wanted on the GPU, would you write your own renderer and never use OpenGL again?"
"2561.000": "So all the huge updates I continuously have on Steam are dev faults! Like 35GB over 35GB of clean install. Do you know what was the 1GB update of The Witness for? I was wondering why it was so huge so early"
"2639.000": "How do you feel about DRM schemes like Denuvo that take a considerable amount of CPU time during game play and add to hard disk writes which is bad for SSDs?"
"2661.000": "I was just curious in my question how some games know if the player is playing a legitimate vs cracked version? Where they crank the difficulty level and make it impossible for cracked version to beat. They use some sort of DLL versioning / signature, or...?"
"2860.000": "Blackboard: DRM"
"3143.000": "Call it a day"
---
location: "chat004"
number: "004"
title: "Cross-compiling"
markers:
"29.000": "Blackboard: Cross-compiling"
"67.000": "Blackboard: Compiling"
"366.000": "Blackboard: cpp -> obj -> binary executable"
"493.000": "Blackboard: Linking"
"715.000": "Blackboard: Cross compiling"
"1196.000": "So, why do I still need Linux to compile for Linux?"
"1409.000": "Close things down"
---
location: "chat005"
number: "005"
title: "SGX and Unbreakable DRM"
markers:
"18.000": "Can you explain how this Intel SGX thing allows for "unbreakable DRM" for applications (kind of an uncommon thing on the PC side up until now)?"
"115.000": "Blackboard: The current state of DRM"
"471.000": "Blackboard: Baking the key, e.g. RSA private key, into the CPU"
"913.000": "You could just give them another public key that you have the private key for [see Resources]"
"1122.000": "Attestation [see Resources]"
"1263.000": "What about the above scenario, but where there is no internet connection? How would one run such software in off-line mode?"
"1314.000": "So the NSA doesn't have to crack it. They just have to rubber-hose Intel"
"1356.000": "Can't this be broken using emulation?"
"1368.000": "Blackboard: SGX, step-by-step"
"1574.000": "Can't they just figure out Intel Key Generator and make a Key Generator for it?"
"1638.000": "So even if the emulation contained a valid key from a registered copy it couldn't be cracked?"
"1713.000": "I assume this breaks certain features of the windows API since the memory is protected? Global hook DLLs for example?"
"1778.000": "What if the CPU fails or you want to upgrade?"
"1802.000": "Would Intel create a different key for each manufactured CPU or is there only ever one key?"
"1842.000": "But this means you lose control of your own system since only Intel can perform actions"
"1878.000": "How susceptible is the locking of portions of memory / CPU cores to malicious encryption programs that simply want to screw your computer over?"
"1933.000": "But if the game is sloppy and ends up allowing arbitrary user code execution, then the code can be leaked"
"1963.000": "If anyone ever leaks Intel's private key, SGX on all those CPUs would be exploitable?"
"2024.000": "Why don't they use this system for banks, something that's worth protecting?"
"2052.000": "Can you think of awesome usages for this? Like an opt-in anti-cheat thing, so the server would know everyone on it had no aim bots or whatever"
"2199.000": "Will this constant decryption used while running a game have an effect on performance?"
"2222.000": "Once a key pair is known, everybody could use it and encrypt the game with it through Valve, leaving Valve at encrypt everything with the same key (CPU) for different users. Well fail on the way very fast"
"2353.000": "Redownloading games sounds bad for SSDs"
"2377.000": "Isn't it expensive for Intel to print a different circuit for each CPU?"
"2389.000": "Does SGX sound like a great place for a rootkit to hide or what?"
"2415.000": "Doesn't that also prevent JIT'ing?"
"2480.000": "Isn't it expensive for Intel to print a different circuit for each CPU and maintain a queryable database for each client 24/7 considering its Key was generated using a quantum measurement of some kind and stuff?"
"2588.000": "Have you heard any word on whether AMD will be implementing this?"
"2596.000": "Isn't DRM good if you want to prevent people from freely redistributing your software?"
"2737.000": "How you draw the future of restricted hardware I should start not buying hardware like this, right?"
"2779.000": "I imagine this would be great to use for hardware banning from games?"
"2832.000": "Let's say a revoke certificate is issued for a compromised CPU, and Valve et al no longer issue new software, why would your system be 'bricked?' Since you already have an encrypted version of the software on your HD, how could they still prevent you from running that software that's already installed?"
"2884.000": "Since the key is on the CPU, couldn't you just buy a new CPU if the key gets blacklisted instead of a whole new computer?"
"2912.000": "Won't that generate a huge market for computers that have been blacklisted?"
"2941.000": "It feels like it is just a matter of time until someone somewhere breaks this scheme and it is just a massive waste of time and resources for everyone. Am I right?"
"2982.000": "Isn't it DRM that is the primary driving force for piracy in the first place?"
"3009.000": "I think it is a bigger deal for companies like Adobe and Autodesk, both of which have software with insanely high piracy rates"
"3020.000": "When big companies start locking out people from using their software, they (the people) will start looking for software from smaller companies that won't use this technology"
"3099.000": "Do you think that there's a chance that the smallish trend of DRM-free games will counteract this SGX stuff in any significant way?"
"3189.000": "Sad the entry costs in fab productions are so high, else I would find a Kickstarter soon to some fantastic "user-owned CPU architecture""
"3219.000": "Could this be taken a step further if they start putting the key on the motherboard instead of the CPU? That's less replaceable, isn't it?"
"3255.000": "So apparently QEMU (a VM hypervisor) has support for emulating SGX. How is this useful?"
"3332.000": "For businesses wouldn't this tech be good for the consumer? I would feel more comfortable if my bank had my data encrypted as tight as possible"
"3415.000": "Has RAD ever had problems with people pirating their software or people releasing the source code?"
"3429.000": "Could encrypting each (16GB?) game download using your SGX key be a prohibitive cost for a company like Valve? How likely would it be for Valve to refuse doing such a thing?"
"3519.000": "I am less afraid of prize control with DRM strong as this one. I am more afraid that the OS of the future will block software that hasn't been signed. That is scary!"
"3554.000": "Would the entire time [game] need to be encrypted or just the executable part"
"3600.000": "Since Valve made a big push for Linux, I'm willing to bet that they wont jump on the SGX train since it is a possible limiter to consumers"
"3617.000": "What is code signing anyway?"
"3643.000": "Blackboard: Public Key Encryption"
"3833.000": "Casey, would you consider prioritizing developing for OSes which refuse to use SGX?"
"3849.000": "You should do more streams about this kind of stuff, it's really interesting"
"3858.000": "DRM like this is sad. Can you please choose a happier topic for the next chat?"
"3869.000": "Wrap things up"
---
location: "chat010"
number: "010"
title: "Partial Specialization"
markers:
"65.000": "Blackboard: References Prevent Null Pointers?"
"838.000": "What's the difference between interpretation and translation?"
"1185.000": "Please could you talk about the time-honoured tradition of games using offline rendered art for certain elements, while still using realtime art for other elements?"
"1337.000": "Blackboard: Partial specialisation"
"1708.000": "Blackboard: How this applies to Resident Evil or Final Fantasy"
"2027.000": "Blackboard: Choosing which variables to keep"
"2307.000": "Blackboard: Think anything I want to compute"
"3041.000": "Blackboard: Light maps"
"3343.000": "Q&A"
"3376.000": "This for me is by far is the best Handmade stream ever. You made my night! Couple of questions: 1) So I guess they did something similar to reflections to implement real-time shadows? 2) How did they achieve other effects like camera panning and lightning? 3) You still need an invisible level collision mesh, correct?"
"3867.000": "What if you are constrained on space as well as computing power? Could you pre-compute parts of your graphics, e.g. a shape from multiple angles of 5 degrees, and then do interpolation to get values that lie in between, e.g. a view of the shape at 7 degrees?"
"3939.000": "Blackboard: Hack"
"4056.000": "Wrap it up"
---
location: "chat011"
number: "011"
title: "Undefined Behavior"
markers:
"10.000": "Set the stage for a chat"
"209.000": "Is Milton successfully maintaining your data between versions?"
"246.000": "Oh shoot! That first question wasn't my questions. I think a lot of people are interested in this UB buisness, and I am too so let's start there and see what comes up after?"
"258.000": "Blackboard: Undefined Behavior"
"482.000": "Blackboard: Intuitive vs Technically Correct"
"734.000": "Blackboard: Why would "anything" happen?"
"954.000": "Blackboard: x87 FPU"
"1175.000": "Blackbard: Recent displays of "anything" and some serious bugs they cause"
"1336.000": "Blackboard: Casey's personal experience with a bug of this nature"
"1593.000": "Blackboard: On Chandler Carruth's talk"
"1861.000": "Blackboard: Why Casey doesn't find Chandler's talk persuasive"
"2082.000": "Blackboard: Responsible specification writing"
"2494.000": "Blackboard: "Wrapping", "Casting", "Implicit conversion""
"2700.000": "Blackboard: The essence of Mike Acton's CppCon talk, programming actual hardware"
"3256.000": "I am quite satisfied! Glad to have new stuff to think about"
"3479.000": "Curious if you've experimented with different 3D polygon triangulation approaches (e.g. Projection to 2D + Ear-Clipping, Constrained Delaunay Triangulation, etc) and settled on something that you use under most circumstances?"
"3549.000": "Yeah, concave"
"3818.000": "Wind it down with a glimpse into the future of Handmade Hero from the Molly Rocket office"
---
location: "chat012"
number: "012"
title: "Imposter Syndrome"
markers:
"10.000": "Set the stage for the day"
"37.000": "I'm a student struggling with imposter syndrome. I feel like I can't do anything and everyone is better than me. Your thoughts on this phenomenon?"
"169.000": "Am I any good at this thing, and at what level do I want to do it?"
"437.000": "What "Imposter Syndrome" describes"
"537.000": "On overvaluing other programmers' ability and internalising the difficult and mistake-filled process of programming"
"947.000": "The process of programming and expecting problems when first starting out"
"1065.000": "Programming aptitude"
"1293.000": "Verifying whether we are (perceiving ourselves to be) failing"
"1524.000": "Factors that go into making a good programmer"
"1582.000": "On developing Asteroids in order to determine whether or not we can program, and why"
"1953.000": "Are you willing to work at being a good programmer?"
"2082.000": "Learning curve"
"2286.000": "On overcoming the emotional response to the question"
"2432.000": "Q&A"
"2478.000": "Summary of ways to address imposter syndrome"
"2584.000": "How to battle the urge to have 100 different small projects around and stay focused on a single project?"
"2890.000": "Always finish a project"
"2955.000": "Some potential value in having more than one project"
"3079.000": "(This is slightly related to one thing you said) I have been getting the feeling that programmers in general are bad at taking objective measurements of things like "how good am I?", with maybe the exception of how long a chunk of code takes. Would you agree with that assessment and do you think we suffer a lot because of it?"
"3312.000": "Somewhat related / a final update on the TA we talked about. His talk on ray tracer efficiency when he got to the GPU side of things basically broke down into "Use OptiX, GPU programming is hard." So... I don't even know, dude"
"3415.000": "Let's say you are someone who is really drawn to starting and growing your own projects in a tough industry like this. While some people are getting experience at big studios, you're fighting through the details of smaller projects. Do you think in the long run it could really hurt you because of how you look on paper?"
"3568.000": "My largest frustration currently is that large sections of my code currently get rejected or rewritten in review. Is there are anything I can do proactively to help myself write more efficient code, i.e. teach myself how to approach some problems better? A lot of the patterns I used regularly are turning out to be sub-optimal"
"3715.000": "By the way, I thought the Molly Rocket office didn't have internet?"
"3791.000": "Hey Casey! I'm new to programming, have been studying Information System for two years. My problem is, I can't start projects at all, I always get stuck and by the end of the day I get nothing done. All that I wanted was to start something to improve my skills. Been following the stream for a while, what should I do?"
"3904.000": "What is the thought process behind not having the internet? Is it for staying on task (avoiding distraction) or for some other reason? How do you look up documentation and things of that nature?"
"4187.000": "Do you think web programmers simply don't aspire to be better programmers, don't know what good programming is or simply don't care? What should we do to unchain their minds from this evil?"
"4455.000": "Shared delusion in web programming"
"4597.000": "For example, one day I decided to write a small game in an engine, but instead of doing that I spent the whole day reading through the engine documentation and video tutorials. By the end of the day I got nothing accomplished and got burned out on it"
"5276.000": "Sign off"
---
location: "chat014"
number: "014"
title: "CRTP and Library Design"
markers:
"8.000": "Recap yesterday's graphics driver crash and determine to set up an external streaming system"
"260.000": "Invite questions and suggestions"
"398.000": "How do you write a program that is graphics driver crash aware?"
"516.000": "Install and run Process Explorer, and consider graphics driver crashes"
"877.000": "Making your app graphics card crash proof: 1) Always check for valid contexts"
"945.000": "Making your app graphics card crash proof: 2) Use fault handlers"
"988.000": "How OBS could handle faults, just protect and flush the stream on crash"
"1045.000": "Shutting down gracefully and relaunching your application"
"1120.000": "How many episodes remaining, estimate?"
"1179.000": "Do you use C++ features like templates? Do you use polymorphism in your own projects?"
"1367.000": "What do you think about the CRTP to do polymorphism?"
"1518.000": "crtp.cpp: Curiously recurring template pattern"
"1648.000": "crtp.cpp: The template<struct Something> syntax"
"1889.000": "Consider ramifications of templates"
"2080.000": "crtp.cpp: Using a union in a parent struct to contain entity types"
"2230.000": "crtp.cpp: C++'s "struct entity_ghost : public entity" inheritance syntax"
"2459.000": "crtp.cpp: Consider ramifications of the inheritance model"
"2742.000": "crtp.cpp: Making the derived class more primal"
"3006.000": "Polymorphic copy construction, virtual functions and the copy constructor"
"3404.000": "crtp.cpp: Spec out our desired Clone() function, using a union in the parent shape struct to contain shape_rectangle and shape_circle, and a switch statement in Clone()"
"3620.000": "crtp2.cpp: Attempt this in a C++ way"
"3843.000": "crtp2.cpp: Run-time type information"
"4174.000": "crtp2.cpp: Virtual function call for Clone() in the structs"
"4268.000": "crtp2.cpp: Base class containing a pure virtual function for cloning, and a shape_cloner templatised struct"
"4497.000": "I didn't want to use virtual functions, so when I found this I was super happy"
"4546.000": "Polymorphic chaining"
"4818.000": "My use case is: I write a library, and I want users of the library to provide their own structs for me to do my library business on, so I need polymorphism one way or another and, since it's a simulation, I want to remove all of the runtime cost I can incur"
"4916.000": "You got it, I have to call them back"
"4937.000": "They define a game, and I define in the library a genetic programming framework to find players that play well at them"
"5007.000": "In particular I create trees (S-expressions) that contain terminals that are defined by the game, which operate on the game state, and then evaluate those games that contains IF, >, == etc, as well as the game terminals, and then make players out of random trees, and do tournaments between each other"
"5070.000": "crtp2.cpp: Spec out an idea for bpaf's library, using an operate_type enum with the library ops occupying the high values"
"5307.000": "How would you pass the information needed to create random operations to the library, from the user, in this framework?"
"5323.000": "crtp2.cpp: Spec out CreateRandomOpCallback()"
"5474.000": "Consider library design"
"5772.000": "The thing I liked about the CRSP approach is that it makes somewhat clear what the "interface" is, you have to implement these methods, and have this data, and I can do the genetic tournament job"
"5897.000": "Your idea is interesting: you extend the enum. It's not that hard to understand"
"5986.000": "Here's a thing, if I want to generate trees for different choices, that need different languages, I use multiple template parameters"
"6031.000": "By different choices I mean, you could have two choices for a game turn, and you might want to have trees that use terminals that look at different aspects of the game"
"6065.000": "For example, imagine a game when you have the choice to play or pass, and if you decide to play you then have to make a move"
"6077.000": "crtp2.cpp: Spec out a GameStateAllowsMeToDoThese condition"
"6167.000": "No, the player doesn't generate random operations, the library generates random trees, and evaluates them"
"6210.000": "Hehe, yeah, it's complicated"
"6237.000": "On picking the things that your library does and does not do"
"6469.000": "Blackboard: Node Graph Disaster Zone"
"6808.000": "Wind it down"
---
location: "chat016"
number: "016"
title: "Drawing a Circle on a 286"
markers:
"131.000": "Upgrade remedybg to 0.2.4.2"
"192.000": "Q: I remember you were asked what's the best way to draw a circle at a Microsoft job interview. What's the answer?"
"340.000": "The "free" aspects of drawing a circle on a 286: the centre and cardinal radius points"
"490.000": "Our target requirements: no floating point, wide instructions or threading; but branching is fine"
"670.000": "Efficiently computing the circle's arc"
"1573.000": "Storing the error value, x and y"
"1915.000": "Plotting a mere eighth of the circle"
"2231.000": "Create bcircle.cpp (from "Bresenham Circle") and create a pixel grid to contain our circle"
"2410.000": "Build and run bcircle to see our pixel grid"
"2449.000": "Reduce the size of our pixel grid to 32×32 characters"
"2464.000": "Check out our smaller pixel grid"
"2479.000": "Implement our error-based circle drawing routine"
"2924.000": "Check out our circle, to find that it is positioned incorrectly"
"2931.000": "Fix our routine to plot the circle around its centre"
"2937.000": "Check out our circle, one eighth of it"
"2972.000": "Make our routine plot our eighth of the circle around the entire circumference"
"3005.000": "Check out our fuller circle"
"3011.000": "Prevent our routine from plotting the pixel grid's centre point"
"3016.000": "Check out our fuller circle"
"3024.000": "Plot the initial pixel"
"3032.000": "Check out our perfect circle"
"3039.000": "Optimise our routine, using one pointer initialised at the circle's centre in lieu of two stored Cx and Cy values"
"3271.000": "Check out our same circle"
"3281.000": "Consider how to remove the eight integer multiplies by the WIDTH"
"3505.000": "Temporarily make our routine test abs(E0) < abs(E1)"
"3526.000": "Check out our identical circle"
"3535.000": "Revert that -E0 < E1 test"
"3547.000": "See that all remains identical"
"3550.000": "Continue to consider how to remove the eight integer multiplies by the WIDTH"
"3615.000": "cmuratori: X<<5?"
"3620.000": "Sully the WIDTH and HEIGHT so that they are not a power of two"
"3651.000": "handmade_hero Calculate the initial X/Y into a pointer and increment that?"
"3686.000": "handmade_hero Store XWidth and YWidth pointers that you increment accordingly every run"
"3732.000": "Ruminate on our circle drawing routine"
"3770.000": "handmade_hero Well, I'm thinking on 68000 terms where there were a bit more registers than x86"
"3802.000": "Consider the WIDTH multiply to have potential for improvement"
"3840.000": "Try to remove the Ep += 1 from the equation"
"3883.000": "Check out our (different) circle"
"3890.000": "Reinstate the Ep += 1"
"3989.000": "Q: Can you get rid of the "Ep += 1" line?"
"4029.000": "Try to negate X the whole way through"
"4097.000": "Check out our same circle"
"4117.000": "Assess our options, with X negated, and try plotting X and Y pixels from different eights of the circle"
"4411.000": "Check out our barely-plotted circle"
"4415.000": "Try looping while X <= (R / 2)"
"4442.000": "Check out our big X"
"4446.000": "Continue to try plotting X and Y pixels from different eights of the circle"
"4636.000": "Plotting X and Y pixels from different eights of the circle"
"4721.000": "Understanding why our X / Y plotting on different eighths doesn't work"
"4855.000": "Q: I'm sorry we decided to go with another candidate because he went to Harvard"
"4880.000": "Midpoint and Bresenham's circle drawing algorithm"
"5002.000": "Temporarily make our routine always increment the Y"
"5028.000": "Check out our circle with the Y always incrementing"
"5076.000": "Revert our routine to not always increment the Y"
"5079.000": "Compare our circle"
"5081.000": "Increase the radius of our circle"
"5090.000": "Check out our larger circle"
"5117.000": "Leave further optimisation as an exercise for the reader"
"5200.000": "Check out the register count of the Intel 386 and 286 and suggest writing this routine in x86 assembly targeted at DOSBox's emulation of a 286"
"5501.000": "Q: Hi Casey! (Sorry, it's pretty long, and has nothing to do with circles) I'm a mathematician, trying to be a graphics / engine programmer. I made some pet projects using OpenGL and Vulkan, in which I was able to make the things I wanted, but since my lack of enough experience, I had a hard time figuring out what "professional programming" is. I started watching Handmade Hero in December from day 1, and I almost caught up (currently I'm at day 520). Thanks for this amazing series, it has been inc… [sic]"
"5549.000": "Wonder who is responsible for the message truncation"
"5623.000": "Q: Do you have any advice about starting a career in graphics / engine programming for someone, who has a very strong background in mathematics, physics, can do research, perhaps can come up with creative ideas, wants to learn ab… [sic]"
"6181.000": "handmade_hero For what it's worth, PCem has cycle exact CPU cores if you want to be more accurate"
"6226.000": "Q: On one of the first Handmade Hero streams you said that it was faster to work (bitwise operations) on a uint32 than a uint8. Why?"
"6608.000": "Q: Any opinion of Linux's way to define integer types with one letter (like u8, i16, i64)?"
"6681.000": "Q: Pug with a gun needs to be an enemy in the game"
"6692.000": "Q: For a program for Windows only is DX the better or OpenGL?"
"6715.000": "handmade_hero What do you think of getting a college degree in information technology? Should you instead be working on hobby projects? My dad has been wanting me to get into a post-secondary school for a long time"
"6937.000": "Q: I have done lots of tools in C like a string utility, JSON parser, data visualization on Linux using X11, vector library and some other tools. Do you think these can be valuable for the CV?"
"7172.000": "Q: Great, thank you! Do you think it's maybe enough to have a YouTube channel, instead of a webpage? Since I have no idea how to do a webpage... Or is it very basic knowledge that I should know?"
"7231.000": "Recommend The ryg blog"
"7315.000": "Q: Why were you suggesting to look at how to do it under 286? I just joined as you were talking about that"
"7376.000": "Q: I've been using a language with function polymorphism similar, I think, to what Jon is doing in JAI, i.e. "multiple dispatch" / dispatch on input types. I recently tried out some different languages and found this is not at all very common. How come not more languages have this? Is it hard to implement, other issues?"
"7480.000": "Q: I heard JAI is close to beta release? Will you be playing about with that or leaving it until it's matured more?"
"7510.000": "Q: Have you met the Amiga programmer like Bruce Dawson? It seems like they were the great programmers"
"7593.000": "Q: Would you use sine / cosine now?"
"7638.000": "Q: Are you going to push the circle solution to GitHub?"
"7648.000": "Q: Do you ever use any scripting language?"
"7657.000": "Q: Is there any computer world outside US?"
"8399.000": "Q: I saw some codes that use the array of function pointers and enums to avoid branching. enums like action type move_right, move_left and then function pointers associated with them. Do you think it is a good idea to do that?"
"8572.000": "Understanding a Skylake core"
"9231.000": "Branch-prediction in the context of a Skylake core"
"9528.000": "Understanding the Skylake CALL instruction"
"9923.000": "Q: I saw Jon implement a compare and swap intrinsic recently for lock-free multithreading. Except for incrementing counters and stuff, what is it useful for? Do I understand it correctly that it's only useful when the thread-unsafe code / task is small?"
"10096.000": "Q: Why aren't we using analog computing, i.e. instead of bits use frequencies. Noise?"
"10157.000": "Q: I am 50k lines into a C++ Android engine development (tried to stay away from inheritance and stuff. Note that I am still learning). Should I rewrite it the "C" way? How can I change my thinking? You at some point said that one should come to the point where OOP fails and then use non-OOP, but I think I am not really there yet. Hope this is not a dumb question"
"10224.000": "Q: He did do a video on branch predictions, though I don't know if it's germane to what we're talking about"
"10342.000": "Recommend Fabian's entire YouTube channel"
"10381.000": "Wind down"
---
location: "chat017"
number: "017"
title: "Modern x64 Architectures and the Cache"
markers:
"295.000": "handmade_hero Hello, it's nice to finally be able to catch a stream live"
"311.000": "handmade_hero Hey Casey, it's my birthday today and I'm glad to catch some Handmade Hero on it! Woo!"
"348.000": "Desire a sponsor for Handmade Hero"
"414.000": "Q: You mentioned on Twitter being interested in a hiring process that includes an option for people to record themselves doing their normal programming work. Is there a way you think the industry could be led to feasibly adopt that?"
"566.000": "handmade_hero Had you seen the RLM parody of those "nerdbox" services that send you some cheap stuff in a box every month?"
"633.000": "Q: I started my first programming job a couple months ago and have been thrown into an unfamiliar codebase a couple of times now. I wouldn't have said so previously, but now I'd say that the hardest part of learning a new codebase is the threading. That stuff can get crazy if it's not thought out carefully beforehand. Thoughts?"
"1170.000": "Q: Can you explain cache misses and how to avoid them? I'm coming from the Java world and never had to think about that"
"1327.000": "Modern Caches"
"1532.000": "The structure and work of an x64 CPU"
"2179.000": "x64 Scheduler out-of-order processing"
"2305.000": "x64 Caches"
"2843.000": "Cache misses, and how to avoid them"
"3436.000": "IPC (Instructions Per Clock) vs. Cache Lines"
"4115.000": "Intel's undocumented L1 ← L2 "fill" penalty"
"4259.000": "Avoiding cache misses: 1) Learn cache sizes"
"4378.000": "Avoiding cache misses: 2) Organize for the cache"
"4816.000": "Avoiding cache misses: 3) Linear, simple access patterns (prefetching)"
"5167.000": "x64 Line buffers"
"5464.000": "Hyperthreading"
"5518.000": "Measuring cache utilisation with VTune or perf"
"5638.000": "Q: Is there a way to transfer data to the cache manually?"
"5679.000": "Intel's PREFETCH instructions"
"6093.000": "Manual cache control in the Nintendo GameCube's Dolphin CPU and the Sony PlayStation 3"
"6238.000": "Is 64 bytes the cache line size on every CPU?"
"6331.000": "Q: Have you tested MeowHash on the new Zen2 processors?"
"6358.000": "handmade_hero This is also important for DMA memory"
"6429.000": "handmade_hero How does the processor handle multiple programs running at the same time, in regards to the cache?"
"6561.000": "The structure of a Zen CPU"
"6792.000": "Yield and extreme ultraviolet lithography"
"6906.000": "Chip fabrication and transistor density"
"7811.000": "Failure in chip fabrication due to the sheer precision of the process"
"8863.000": "Fabrication Yield and multiple cores"
"9434.000": "Cache Between Cores: 1) NUMA (Non-Uniform Memory Access) architecture"
"9818.000": "Cache Between Cores: 2) MESI (Modified, Exclusive, Shared, Invalid) protocol"
"10120.000": "Q: handmade_hero 64-byte lines are pervasive due to the burst size of DDR controllers. And yes, Arm also moved from 32-byte to 64-byte"
"10165.000": "Q: The process for the silicon ingots is called Czochralski process"
"10177.000": "handmade_hero Why don't they focus on increasing the cache sizes? Is there a hard limit to it or are they happy with the sizes as they are?"
"10265.000": "Q: Isn't wavelength and size of electron kind of the same? Just different models?"
"10277.000": "Q: Did have the privilege to wear one at Infineon. Really interesting experience"
"10295.000": "Q: If the probability of failure for one chip is P(F), and the probability of failure for two combined chips is denoted P(FC), then P(FC) = 2 * P(F) - P(F) * P(F)"
"10316.000": "Failure probability of two combined chips"
"10848.000": "Q: It's the union of either chip being a dud, minus the intersection of both chips being a dud (since this is already accounted for in the union)"
"10898.000": "Q: I over simplified. It should just be Bayes' theorem and these events should be independent, so just multiply the failure rate"
"10973.000": "Close this down"
---
location: "chat018"
number: "018"
title: "Pixel Art Games and nSight Shader Analysis"
markers:
"2.000": "Welcome to the digression on pixel art games"
"183.000": "Launch Children of Morta (through Steam) and NVIDIA Nsight Graphics"
"310.000": "Point out the pixel art rendering artifacts"
"368.000": "Create a project in Nsight for Children of Morta, with a few words on launching games through Steam"
"670.000": "Launch Children of Morta standalone, and then within Nsight"
"886.000": "Capture our first D3D11 frame of Children of Morta and scrub through the draw events"
"1271.000": "Swaying tree draw event: Events View"
"1465.000": "Swaying tree draw event: API Inspector View - Input Assembler"
"1609.000": "Swaying tree draw event: API Inspector View - Vertex Shader"
"1691.000": "Swaying tree draw event: API Inspector View - Rasterizer"
"1739.000": "Swaying tree draw event: API Inspector View - Pixel Shader"
"1855.000": "Swaying tree draw event: API Inspector View - Pixel Shader Disassembly, and Resource Views"
"2020.000": "Swaying tree draw event: API Inspector View - Our tree sprite and its assembly"
"2651.000": "We got a puss!"
"2695.000": "Swaying tree draw event: API Inspector View - Understanding our tree sprite's assembly"
"2743.000": "How we may perform sub-pixel sampling"
"2937.000": "Sampling Pixel Art"
"3158.000": "The undesirable smearing effect of bilinear filtering on a pixel (texel) art game"
"3294.000": "Panning with bilinear filtering disabled"
"3676.000": "Zooming and unaligned panning with bilinear filtering disabled"
"3887.000": "Understanding our desired filter in 1D"
"4007.000": "Sub-pixel filtering: Brute-force sampling"
"4132.000": "Sub-pixel filtering: UV coefficient bilinear sampling"
"4809.000": "Plea to Unity: Precondition your UV coordinates in the pixel shader"
"4881.000": "Preconditioning your UV coordinates in the pixel shader"
"6947.000": "handmade_hero Try "-force-glcore" for launch parameter to force OpenGL"
"6984.000": "Try unsuccessfully to launch Children of Morta in Nsight using the "force-glcore" command line argument"
"7080.000": "Capture and export a frame of Children of Morta"
"7254.000": "Inspect our frame export"
"7347.000": "Q&A"
"7398.000": "Q: Here's a good side-by-side example of the artifacts you're talking about"
"7810.000": "Understanding the smooth sub-pixel filtering in that Shadertoy"
"8019.000": "Q: Children of Morta looks like a fairly ambitious game. Why do you think they didn't bother to implement proper sub-pixel rendering?"
"8054.000": "Q: How did you learn about this artifact / how did you figure out the cause?"
"8098.000": "Q: That Shadertoy is by our very own d7samurai!"
"8113.000": "Q: Someone posted a link before saying Unity has a pixel perfect 2D package"
"8282.000": "handmade_hero How much more work / is any extra work required for oblique viewing?"
"8313.000": "Q: (Off-topic) How is Pow function implemented? How would you go about implementing an efficient power?"
"8618.000": "Q: I thought for cosine and sine we would use a table lookup (instead of series expansion), isn't it?"
"8830.000": "Q: Is there ever a reason not to compute your pixels this way? Is this a 2D only thing, etc?"
"8870.000": "Q: It seems that this artifact is quite well known, at least in your circle. Is there a name for it?"
"8952.000": "handmade_hero: This shader can only address artifacting within the texture, but cannot address sub-pixel occlusion artifacting (i.e. the shimmer is still present on exterior edge pixels)"
"9023.000": "Q: It was surprising to see how much latency was on division. Square root seems to have a similar latency, but reciprocal square root (i.e. _mm_rsqrt_ps) is as quick as multiply (with just half the throughput). Why is rsqrt much faster than regular sqrt?"
"9174.000": "Q: Is there a less precise version of sqrt then? Because a lot of the math we need in games does not need the full precision"
"9214.000": "Q: Could you do something similar inspecting some Unreal Engine 4 game and end the engine war for good?"
"9263.000": "handmade_hero: So the artifacting still present here is because there is no border-pixel? If the texture were prepared properly, it would address that as well"
"9504.000": "Wrap it up"
---
location: "chat019"
number: "019"
title: "Introduction to Mesh Skinning"
markers:
"1.000": "Welcome to the off-topic stream on mesh skinning"
"91.000": "Our professional experience of mesh skinning"
"271.000": "Introduction to Mesh Skinning"
"333.000": "The bases for 3D graphics: Basic Transform"
"584.000": "Matrix multiplication"
"721.000": "The bases for 3D graphics: Linear Blend"
"956.000": "Convex (or Interpolated) Linear Blending"
"1287.000": "Thinking of convex linear blending as a sum of terms"
"1527.000": "Euclidean Norms"
"1887.000": "Understanding norm(1), the Manhattan Distance"
"1979.000": "Using norm(1) to produce a coherent convex blend equation"
"2191.000": "Applying our norm(1) convex blend equation"
"2341.000": "We've got a puss situation"
"2357.000": "Simplifying our norm(1) convex blend equation"
"2498.000": "Understanding why our norm(1) equation constrains us within 0 and 1"
"2724.000": "Convex Multi-Point Blend"
"2932.000": "General Blend Equation"
"3176.000": "Mesh Skinning: The problem of disjoint objects when transformed"
"3310.000": "Mesh Skinning: Sharing vertices, producing an undesirable collapse"
"3494.000": "Mesh Skinning: Subtly blending between multiple collapses"
"3662.000": "Mesh Skinning: Applying our General Blend Equation"
"3954.000": "Traditional application of mesh skinning: Input - Rest Pose, Skeleton and Mesh"
"4193.000": "Traditional application of mesh skinning: Output - Pose"
"4285.000": "Using the inverse of the rest pose to pin a mesh to a skeleton"
"4626.000": "The problem of storing the relative positions of multiple bones"
"4814.000": "Composite Matrix / Transform: Model and store both the skeleton and mesh in the same space"
"5210.000": "Preparing and applying the Composite Transform"
"5449.000": "Practical considerations of handling many bones"
"5672.000": "The End...?"
"5700.000": "Critiquing Mesh Skinning"
"6001.000": "Beyond Mesh Skinning: Simulation"
"6177.000": "Beyond Mesh Skinning: Double Down Art Input"
"6360.000": "Recommend Pose Space Deformation"
"6485.000": "Q&A"
"6499.000": "Q: For what version of granny had you worked?"
"6582.000": "Q: Are the bone transform inverses stored relative to the mesh center?"
"6613.000": "Q: Please let Molly look out the window. She was trying so hard"
"6617.000": "Q: What file format would you recommend for beginners, and for someone not willing to use a lib like Assimp?"
"6684.000": "Q: Would Bézier curves work for the fatty part of the arm? Probably be terrible"
"6793.000": "Q: How often would composite bone matrices usually be updated? Per frame?"
"6825.000": "Q: How do quaternions fit into this?"
"6940.000": "Q: What kind of skinning will you use for Handmade Hero? Just basic bones and weights, and will you do this in the vertex shader?"
"6953.000": "Q: How do you recommend to go about learning a new language or technology? Is there a "wrong" way to do it?"
"6961.000": "Q: Not on-topic but: Did I miss live Chartreuse?"
"6985.000": "Q: If you send a lot of data to the GPU and it doesn't have that much memory, is there some sort of virtual memory that will be used or will it crash?"
"7042.000": "Q: So the lerp vs slerp is in the animation system and not in the skinning system? Or I missed when you said the revelation you had back in the time?"
"7200.000": "Q: Coordinates, you've drawn Z as up, while in OpenGL Z is deep"
"7240.000": "Mirror Analogy: In Your Head vs In Reality"
"7463.000": "Q: The ligament seem to have a bearing on the arm movement. Also the pivot of the arm, knee, shoulder seem to be on the outside and not the centre. Which makes me think we are thinking about the problem naively. Who knows?"
"7483.000": "Bone placement in a mesh skinning system"
"7509.000": "Q: And last, I'm in Redmond, so if you want to use that Chartreuse..."
"7519.000": "Q: Greetings Casey. I've been going through the multithreading code and remember one episode you were talking about loading the asset files in chunks (not all at once). Did you go over how to have one thread read from disk, while another thread processes the data? I'm just trying to wrap my head around doing it in parallel (making sure data processed is in correct order)"
"7535.000": "Q: Following on from what you've explained about coordinate systems in OpenGL and how we choose it: What do we need to do to setup Z up instead?"
"7578.000": "Q: Your electrical storm yesterday actually made national headlines"
"7582.000": "Wrap it up"
---
location: "chat020"
number: "020"
title: "Assembly Analysis and Front-end Register Clears"
markers:
"3.000": "Welcome to the chat"
"92.000": "Advocate ZII (Zero Is Initialisation)"
"518.000": "Describe Jesse Meyer's ZII experiment"
"604.000": "DOS vs Linux memory mapping, page faults and profiling"
"1118.000": "Memory mapping and profiling: 1) Hunt for minimum"
"1324.000": "Memory mapping and profiling: 2) Statistical breakdown, ignoring outliers"
"1492.000": "General advice on profiling CPU performance"
"1542.000": "Create xorclear.cpp"
"1644.000": "Set up our xorclear experiment in Compiler Explorer"
"1735.000": "Initially, msvc seems to generate better code than clang"
"1937.000": "Walk through the xorclear code in conjunction with the clang-generated assembly"
"2354.000": "Macro-ops subject to fusion (cmp and jne)"
"2670.000": "Memory Execution Units and Scalar Arithmetic Units"
"2796.000": "Port usage of ADD (R64, I8)"
"2990.000": "Port usage of CMP (R64, I32)"
"3087.000": "Writing Identity into the Matrices array using mov, movaps and movups instructions"
"3509.000": "xorps"
"3628.000": "Does Clang do anything more than -O3?"
"3666.000": "-mavx2?"
"3681.000": "Loading and writing zeros"
"3880.000": "Horrible code: 1) Superfluous zero writes"
"3929.000": "Try moving the Identity and Zero matrix_4x4 outside of main()"
"3970.000": "Move Identity and Zero matrix_4x4 back inside main()"
"3982.000": "Horrible code: 1) Superfluous zero writes (cont.)"
"4012.000": "Horrible code: 2) Using seven instructions to move 64 bytes"
"4107.000": "Hunt uops for mov"
"4263.000": "MOVUPS (M128, XMM)"
"4496.000": "Check the Intel 64 and IA-32 Architectures Software Developer Manual for MOV"
"4549.000": "MOVQ (M64, XMM)"
"4568.000": "MOV permutations"
"4610.000": "Port usage of mov, movaps and movups"
"4640.000": "Next page?"
"4679.000": "MOV (M32, I32)"
"4773.000": "Horrible code: 2) Using seven instructions to move 64 bytes (cont.)"
"4801.000": "Hand-write and -read 128-bit rows using _mm_setr_ps() and _mm_storeu_ps()"
"4956.000": "The clang-generated code is now better, with one loop unroll"
"5142.000": "O3 didn't help here"
"5156.000": "Thoughts on explicitly writing out intrinsics"
"5214.000": "Walk through the xorclear code in conjunction with the msvc-generated assembly"
"5289.000": "Hunt uops for rep"
"5349.000": "MOVSB_REPE"
"5459.000": "Determine to try a dependent clear"
"5535.000": "handmade_hero Try something like -O3 -march=skylake -ffast-math"
"5559.000": "Temporarily try moving the Identity and Zero matrix_4x4 outside of main()"
"5630.000": "You can leave it inside and set it to static"
"5716.000": "Introduce a conditional clear in xorclear"
"5954.000": "Compare clang vs msvc on our conditional clear"
"6254.000": "Does it change if you give it -mtune=znver2?"
"6287.000": "Clang often outputs slow code, but faster intrinsics-heavy code"
"6334.000": "Walk through the msvc-generated code for our conditional clear"
"6382.000": "Why clearing to zero is free"
"6545.000": "Non-free zero-clearing: 1) When frontend-bound"
"6705.000": "Skylake's memory subsystem is in charge of the loads and store requests and ordering. Since Haswell, it's possible to sustain two memory reads (on ports 2 and 3) and one memory write (on port 4) each cycle"
"6749.000": "Non-free zero-clearing: 2) Code size, alignment differences"
"6802.000": "Our movaps and xorps operations are free"
"6838.000": "Try declaring the rows uninitialised, only conditionally setting to zero"
"6885.000": "Our code introduced an extra jmp"
"6980.000": "Always initialise to zero"
"7027.000": "Replace the branch with a masked blend"
"7342.000": "msvc doesn't bother to blend with 0"
"7481.000": "Fill the second column with 1s"
"7496.000": "msvc doesn't bother to do the full blend on each row"
"7530.000": "Make each row different"
"7551.000": "Our instructions will overlap"
"7629.000": "Q&A"
"7646.000": "handmade_hero Hi Casey. Jesse from twitter here. Thank you so much for taking the time to explain and demonstrate this on Handmade Hero! Deeply appreciated!"
"7717.000": "If you take a look at different add / sub ops with immediates, you'll see nice tricks with the lea instruction"
"7796.000": "Q: I compiled the code with icc, Intel's compiler, with O2 and it takes 3.5 seconds to run it. Is this really bad?"
"7809.000": "Memory bandwidth will be the bottleneck"
"8015.000": "Q: Someone has mentioned that older Clang versions generate better code. Could it be because of Heartbleed mitigation?"
"8026.000": "Try rolling back to older clang versions"
"8064.000": "Q: I read that mixing SSE2 and AVX2 will incur a performance penalty. How would you handle optimizing code, if you want to support AVX2, but also SSE for older systems? Would you just have separate builds for each?"
"8189.000": "Isolating architecture-dependent code"
"8314.000": "Q: Could you show what gcc does?"
"8323.000": "GCC uses all scalar mov instructions"
"8358.000": "Q: Try Clang 6"
"8364.000": "Clang 6 still looks bad"
"8398.000": "gcc -O3 generates the correct code"
"8426.000": "Q: Could you provide the twitter conversation link that you are responding to, for the YouTube video?"
"8463.000": "Q: You haven't tried latest clang with O3, did you?"
"8470.000": "Latest clang with -O3 generates bad code"
"8473.000": "Compilers should produce reliable code without the need for switches, optimisation passes, etc."
"8603.000": "handmade_hero Is it possible those extra jumps clang generates are a spectre mitigation?"
"8670.000": "Spectre mitigation is on hardware level? Why would clang mess up the exe?"
"8705.000": "Share the godbolt link"
"8733.000": "Close it down with a plug of Star Code Galaxy"
---
