---
location: "ray00"
number: "00"
title: "Making a Simple Raycaster"
markers:
"5.000": "Welcome to the stream, with a few words on the new computers"
"249.000": "Embark on making a ray tracer, starting with a directory and build.bat"
"377.000": "ray.cpp: Implement Hello World!"
"462.000": "Build and run successfully"
"481.000": "Ray tracer"
"580.000": "ray.cpp: Introduce struct bitmap_header and a bitmap writer"
"802.000": "A few words on malloc()"
"891.000": "ray.cpp: Write colour values into memory, with a few words on our representation of this memory"
"1115.000": "ray.cpp: Initialise a bitmap Header"
"1398.000": "ray.cpp: Write to a file using fwrite()"
"1783.000": "ray.cpp: typedef our types"
"1877.000": "Step through the code and try unsuccessfully to read our bitmap image"
"1978.000": "ray.cpp: Fill in the bitmap Header"
"2259.000": "Run successfully, but receive find that our file is not well-formed"
"2298.000": "Step through the code and inspect our header"
"2329.000": "Draw a picture and save it out as a BMP file"
"2385.000": "ray.cpp: Load reference.bmp"
"2423.000": "Step through and inspect the header of the well-formed reference.bmp"
"2522.000": "ray.cpp: Fix up our header to be closer to the well-formed file"
"2669.000": "Run and successfully read our bitmap file"
"2709.000": "ray.cpp: Write to all pixels in the image, and succesfully view it"
"2724.000": "ray.cpp: Add a red band to the image, to emphasise its directionality"
"2752.000": "Run and view our image"
"2790.000": "ray.cpp: Flip the sign of the Header.Height to draw the image from top to bottom"
"2846.000": "ray.cpp: Introduce struct image_32, WriteImage(), GetTotalPixelSize() and AllocateImage()"
"3200.000": "Run our program to recreate the bitmap file"
"3244.000": "Consider the next logical step for our ray tracer"
"3311.000": "ray.h: Pull out our types from ray.cpp and introduce structs material, plane, sphere and world"
"3615.000": "ray.cpp: Initialise a world and two materials"
"3799.000": "ray_math.h: Pull in structs v2, v3 and v4 from handmade_platform.h, and various functions from handmade_math.h"
"4198.000": "ray.cpp: Determine to initialise a plane"
"4251.000": "Blackboard: Defining planes, using the inner product"
"4503.000": "ray.cpp: Define a plane"
"4529.000": "ray.cpp: Introduce the notion of a camera"
"4671.000": "Blackboard: Camera axis coordinate system"
"4737.000": "ray.cpp: Continue to define the camera"
"4895.000": "Step through and inspect the camera values"
"4984.000": "ray.cpp: Hard set the CameraZ to 0, 1, 0 and step through to inspect the other axes"
"5043.000": "Blackboard: 3D coordinate system, following the right-hand rule"
"5257.000": "ray.cpp: Correctly define the camera axes"
"5305.000": "Step through and inspect the camera values"
"5333.000": "Blackboard: Shooting rays through a plane"
"5442.000": "ray.cpp: Convert our pixel positions to ratios across a film plane"
"5698.000": "ray.cpp: Shoot rays at our film"
"5848.000": "ray.cpp: Introduce RayCast(), testing first that it outputs the colours we expect"
"6006.000": "Blackboard: Ray hit detection"
"6062.000": "ray.cpp: Continue to implement RayCast()"
"6268.000": "Blackboard: Ray intersection"
"6482.000": "ray.cpp: Compute our intersection distance"
"6528.000": "Blackboard: Parallel ray and plane"
"6589.000": "ray.cpp: Make RayCast() test the Denominator against our Tolerance value"
"6652.000": "build.bat: Automatically open the image after building"
"6742.000": "Build, see our image and check that we are producing what we expect"
"6860.000": "Blackboard: Double-check our equations"
"7007.000": "ray.cpp: Set one material colour to grey, consider that we are exactly backwards and investigate why"
"7145.000": "Blackboard: Camera coordinates"
"7172.000": "Continue to investigate our inversion bug"
"7407.000": "Blackboard: Producing camera coordinates"
"7458.000": "ray.cpp: Set CameraX by crossing 0, 0, 1 and CameraZ the other way"
"7520.000": "View our correct image"
"7538.000": "ray.cpp: Add a sphere"
"7681.000": "ray.cpp: Enable RayCast() to handle spheres"
"7728.000": "Blackboard: Sphere Intersection"
"8170.000": "ray.cpp: Enable RayCast() to compute the nearest sphere interesection point"
"8594.000": "Run and view our image"
"8616.000": "Blackboard: Sphere origin"
"8680.000": "ray.cpp: Make RayCast() correctly account for the sphere origin"
"8825.000": "ray.cpp: Correctly compute FilmX"
"8850.000": "ray.cpp: Handle the aspect ratio"
"9011.000": "Blackboard: Aspect ratio"
"9042.000": "View our image in the correct aspect"
"9102.000": "ray.cpp: Output stats"
"9167.000": "Run our program in the console to see our stats"
"9288.000": "ray.cpp: Enable RayCast() to cast multiple rays from different origins"
"9905.000": "ray.h: Change the material struct to contain EmitColor and RefColor"
"9977.000": "ray.cpp: Enable RayCast() to use both of those material colours"
"10042.000": "Blackboard: Attenuating angles"
"10110.000": "ray.cpp: Make RayCast() attenuate ray angles to correctly propagate light back to the camera"
"10313.000": "View our scene"
"10405.000": "Blackboard: Surface reflectance"
"10578.000": "ray.h: Add Specular to the material struct"
"10606.000": "Blackboard: Reflecting a vector"
"10648.000": "ray.cpp: Enable RayCast() to bounce rays randomly (but not unbiased) around the scene, renaming Specular to Scatter"
"10882.000": "ray.cpp: Introduce RandomUnilateral() and RandomBilateral()"
"11015.000": "View our image, and see black dots around the scene"
"11085.000": "ray.cpp: Set RayDirection to PureBounce, and correctly set the NextOrigin"
"11170.000": "View our image, consider that it's not quite right and investigate why"
"11252.000": "ray.cpp: Correctly set PureBounce and NextNormal"
"11397.000": "View our image and consider that the sphere may be below the plane"
"11529.000": "ray.cpp: Make RayCast() use the RandomBounce, and view our image"
"11605.000": "ray.cpp: Enable RayCast() to cast multiple rays per pixel"
"11690.000": "Blackboard: Angular attenuation"
"11715.000": "ray.cpp: Enable RayCast() to account for cosine attenuation"
"11852.000": "View the image, and consider that it's sort of correct"
"11868.000": "ray.cpp: Toggle off the cosine attenuation in RayCast()"
"11904.000": "ray.cpp: Add more spheres and materials"
"12072.000": "View our image, with spheres reflecting light"
"12154.000": "ray.cpp: Handle gamma correct sRGB"
"12221.000": "View our gamma correct image"
"12248.000": "ray.cpp: Introduce ExactLinearTosRGB()"
"12512.000": "ray_math.h: Introduce Pow()"
"12534.000": "View our apparently correct sRGB image"
"12584.000": "ray.cpp: Add a fourth sphere"
"12636.000": "View our image"
"12673.000": "ray.cpp: Re-enable RayCast() to perform cosine attenuation, and turn the red sphere into an emitter"
"12777.000": "View our image and consider further developments"
"12870.000": "ray.cpp: Compute the RayOrigin and RayDirection every time, to facilitate anti-aliasing at higher sampling rates"
"12914.000": "View the aliasing where the spheres meet the planes"
"12946.000": "ray.cpp: Jitter the ray direction"
"13053.000": "View the image with less and less aliasing as the RaysPerPixel increases"
"13121.000": "Consider optimisations"
"13165.000": "Q&A"
"13190.000": "Is this series for total beginners in game programming?"
"13219.000": "Is it possible, or how hard is it, to have a debug system built-into your project that completely eliminates the need for a dedicated side debugger?"
"13251.000": "Your mic is bouncing on the metal ring on your hood"
"13273.000": "So I just saw an old video where it says "Project will go at least until 2016". How far along towards the end are you?"
"13322.000": "Is this going to be uploaded with the normal Handmade Hero code as well?"
"13331.000": "Bug in the denominator check"
"13350.000": "ray.cpp: Fix Denom check"
"13402.000": "Shouldn't you initialize your materials so EmitColor and RefColor are initialized?"
"13421.000": "Maybe instead of reinventing BRDF (what you call reflectance), use some well-known BRDF, like Disney's? You can look at the implementation of one in e.g. Blender"
"13451.000": "Could we use ray casting to determine a scene in real time that would allow infinite visibility, like with sparse voxel octree as opposed to a rasterizer?"
"13539.000": "Whatever happened to owlbot?"
"13544.000": "why not use std::thread?"
"13551.000": "Is it just a coincidence that three of the spheres all have their top / bottom line up almost exactly on the horizon? Or is that an artifact of something we're doing?"
"13576.000": "Could you just insert pragma omp on the raycaster loop?"
"13596.000": "Could you disable windows bells? I hate these sounds"
"13624.000": "The anti-alias has "roping" artifacts. Why?"
"13686.000": "View the anti-aliasing of the image in Paint"
"13764.000": "Will the growing popularity of multi-threading make procedural programming harder?"
"13808.000": "Can you make one of the spheres a mirror?"
"13823.000": "ray.cpp: Create a mirror ball"
"13920.000": "Is this source code included with $15 for Handmade Hero source?"
"13950.000": "Materials[6] should be 7 now"
"13998.000": "Can you share the question prompter code too? I missed some of the stream and would like to see it"
"14023.000": "I meant before if we could use traditional ray casting like Wolfenstein used to determine mesh visibility in the distance just using diffuse lighting"
"14055.000": "View our mirror ball"
"14073.000": "That's it, with plans for the future of our raycaster"
"14300.000": "Recommend Physically Based Rendering"
"14379.000": "Plug Miblo's Patreon"
---
location: "ray01"
number: "01"
title: "Multithreading"
markers:
"9.000": "Recap and set the stage for the day"
"75.000": "ray.cpp: Rename RayCount to BounceCount"
"106.000": "View our image and determine to perform better material processing and to optimise"
"508.000": "ray.cpp: Figure out the resolution of clock_t"
"776.000": "ray.cpp. Introduce a timer using clock() from time.h"
"1155.000": "Run our ray caster and see the timer results, noting that the ms/bounce remains constant for various bounce counts"
"1255.000": "Consider the performance gain we may achieve by multithreading"
"1529.000": "Determine to perform the usual way of doing ray tracing, using tiles that are square shaped"
"1586.000": "ray.cpp: Introduce RenderTile() and GetPixelPointer()"
"1945.000": "ray.cpp: Break up the world into multiple tiles"
"2616.000": "ray.cpp: Add TileRetiredCount to the world struct"
"2918.000": "ray.cpp: Inline the contents of RayCast() in RenderTile()"
"3248.000": "ray.h: Introduce work_queue and work_order to enable multithreading"
"3377.000": "Describe volatile"
"3669.000": "ray.cpp: Initialise a work_queue and push our RenderTile() calls onto it"
"4015.000": "Run our ray tracer to see that everything's good"
"4034.000": "ray.cpp: Make RenderTile() only take a work_queue and get its work_order off that queue itself"
"4251.000": "Run to see that all is well"
"4329.000": "ray.cpp: Set us up for multithreading by introducing LockedAddAndReturnPreviousValue() and CreateWorkThread()"
"4869.000": "ray.cpp: Implement CreateWorkThread() using CreateThread() and introduce WorkerThread()"
"5228.000": "Run to see that our speed has improved dramatically"
"5305.000": "ray.cpp: Make LockedAddAndReturnPreviousValue() call InterlockedExchangeAdd64()"
"5367.000": "Run to see our 5x speed-up"
"5424.000": "ray.cpp: Fuss with the CoreCount and Tile sizes to see if they affect the speed"
"5558.000": "Blackboard: Drain-out"
"5723.000": "ray.cpp: Introduce GetCPUCoreCount()"
"5958.000": "win32_ray.cpp: Pull in Windows-specific functions from ray.cpp"
"6149.000": "build.bat: Prevent our program from running if compilation fails"
"6424.000": "ray.cpp: Crank up the RaysPerPixel from 16 to 512 and view our smooth image"
"6500.000": "Run our program on the command line"
"6572.000": "ray.h: Add RaysPerPixel and MaxBounceCount to work_queue"
"6731.000": "Run to see all the information we need, and note that the next step will be SIMD"
"6814.000": "Q&A"
"6825.000": "Could you please make a portal (changing ray position and orientation upon hitting the portal to come out of the second portal)?"
"6840.000": "Do you assume the x86 memory model in your code?"
"6867.000": "What about const volatile and register together in a single declaration? (I saw it once in an implementation for a BLE stack)"
"6925.000": "ray.cpp: Log stats to stderr"
"7003.000": "What is the difference between Path Tracing and Ray Tracing?"
"7164.000": "Now that the raysPerPixel and maxBounceCount are parameters, you could potentially give different tiles different settings, to compare quality side by side on the same image?"
"7184.000": "What do you think about OpenMP?"
"7188.000": "What is SIMD [sic]?"
"7265.000": "Do you get effects like bloom / lens flare "for free" if you implement more realistic camera stuff?"
"7366.000": "Isn't the uniform random sampling bad? I thought you need to use blue noise or Poisson-Disc sampling or something?"
"7420.000": "ARM memory model is extremely relaxed, though"
"7436.000": "So you mentioned that hyperthreading can schedule instructions on separate ALUs of the same core. Did I hear that correctly or did I misconstrue what you said in my mind?"
"7590.000": "Would you change anything if you were using a Ryzen / Threadripper CPU that has 4 core core-complexes?"
"7640.000": "Can you give a quick overview of how Importance Sampling works?"
"7645.000": "Why were you trying to kill me? I was working very hard"
"7656.000": "Could you maybe do a GJK implementation on a test stream some time?"
"7665.000": "Is AVX2 common enough to use it in, like, a game?"
"7707.000": "Will the raytracer program in the future use GPU to do the ray traces?"
"7711.000": "Where can we find the code?"
"7726.000": "Wouldn't it be more sufficient to make an entry for each ray to split up the work even more evenly and also this could work on the GPU?"
"7756.000": "How much different is this raytracer to those with "live previews" where you see the image get better starting low res and goes higher and higher? (I assume they don't render line by line?)"
"7823.000": "Are there any things that you need to do to take extra advantage of hyperthreading CPUs or do you treat threading the same as a non-hyperthreading CPU?"
"7893.000": "The ARM memory model"
"8330.000": "That's it for today"
---
location: "ray02"
number: "02"
title: "Replacing rand() and Preparing for SIMD"
markers:
"6.000": "Recap and set the stage for the day"
"98.000": "Note that we're building in optimised mode"
"135.000": "Run and see our output image"
"219.000": "ray.cpp: Walk through the code"
"323.000": "Consider two areas of optimisation: 1) Bounding Volume Hierarchy"
"417.000": "2) Using better math operations"
"462.000": "Step into RenderTile() and inspect the asm, noting down routines to improve"
"951.000": "Check out PCG, A Family of Better Random Number Generators with a recommendation to read the full paper"
"1453.000": "Check out the x86 SSE2 shift-left instructions"
"1679.000": "Read 6.3 - Specific Implementations and the Xorshift wiki article"
"1875.000": "Introduce XOrShift32() from Wikipedia with a check into doing this in a 64-bit"
"2265.000": "Run our program to get a benchmark timing"
"2339.000": "Replace rand() with our new XOrShift32(), packing Entropy in the work_order struct"
"2799.000": "Run to see no obvious problems with our output, and note our dramatically improved performance"
"2927.000": "Step into the code and inspect the asm to see a lot of mulss calls"
"3090.000": "Introduce CastSampleRays() to do some of the work of RenderTile()"
"3501.000": "Run to see that we lose some speed"
"3552.000": "Make RenderTile() only use a random_series in its inner loop"
"3607.000": "Run to see that that's a little bit better"
"3667.000": "Rename cast_result to cast_state which contains both the input and output data"
"4092.000": "Run to see some busted imagery"
"4138.000": "Fix RenderTile() to correctly fill out the cast_state State"
"4340.000": "Run to see that that helps"
"4385.000": "Consider how to perform this ray casting wide"
"4684.000": "Transform CastSampleRays() to handle the notion of operating wide"
"4746.000": "Run to see that it runs roughly four times faster, and that the image now contains tile-boundary artifacts"
"4868.000": "Temporarily revert RandomUnlateral() to use rand()"
"4898.000": "Run to see no artifacts, and note that the XOrShift32() needs improving"
"4966.000": "Sketch in the code to enable CastSampleRays() to operate wide"
"5597.000": "Describe our current situation"
"5651.000": "Set up CastSampleRays() to let all rays in all lanes finish"
"5901.000": "Consider how to track the materials wide"
"6008.000": "Set up CastSampleRays() to track the materials wide and collate all the computations"
"6749.000": "Create ray_lane.h to #define the lanes, and introduce RandomBilateralLane(), various permutations of ConditionalAssign(), a Max(), MaskIsZeroed() and versions of HorizontalAdd()"
"7419.000": "Run and see totally busted imagery"
"7463.000": "Build in debug mode and on one core"
"7540.000": "Step in to CastSampleRays() and inspect its values"
"7556.000": "Make CastSampleRays() set FilmX and FilmY to their centres"
"7634.000": "Step in to CastSampleRays() and see that the State->Series and Order->Entropy are both 0"
"7716.000": "Make CastSampleRays() offset the Entropy and use different random series per ray"
"7767.000": "Step in to CastSampleRays() and note that the ConditionalAssign() is wrong"
"7844.000": "Make ConditionalAssign() zero the Mask if there is nothing set in it"
"7880.000": "Step in to ConditionalAssign() to see that that is better"
"7901.000": "Run to see how the picture looks"
"8004.000": "View the image"
"8029.000": "Reduce the RayCount and increase the CoreCount"
"8089.000": "Investigate the summation"
"8273.000": "Make CastSampleRays() correctly set the LaneMask"
"8315.000": "Run and see a more correct image"
"8332.000": "Switch back to the optimised version, with more RaysPerPixel"
"8349.000": "Run to see that we're darker"
"8413.000": "Correctly set the LaneWidth"
"8480.000": "Run and see that the images are basically indistinguishable"
"8532.000": "Set up to support a constrained set of LANE_WIDTH values"
"9005.000": "Run to see that XOrShift32() is actually fine"
"9105.000": "Do LANE_WIDTH==8 too"
"9163.000": "Q&A"
"9226.000": "Q: How would one implement something like bloom effect in a raytracer?"
"9586.000": "Run our program to capture its performance statistics"
"9727.000": "Q: Is the Halton 2,3 sequence a good way to generate sample positions? I've heard about some people using it. It is a low discrepancy series"
"9791.000": "Rename our image and stat files"
"9870.000": "Q: When you learn this way of doing SIMD? I remember in Handmade Hero when we had optimized the renderer we use __m128 every way"
"9965.000": "Q: What is your take on AA methods? I'm currently looking for one for my game. I see The Witness has MSAA option only (no FXAA, TXAA and friends)?"
"9991.000": "Q: Are there any machines with hardware RNG that just puts random values into a register with one instruction?"
"10124.000": "Q: G'day, long time no stream. Low-discrepancy sequences do exhibit blue noise behaviours if you do them right, but their main advantage is that you can access the quasi-random streams in an arbitrary order. Not really relevant yet. Also, you can do better than 2,3 Halton"
"10177.000": "Q: Do shader languages expose things like "Conditional Assign"?"
"10274.000": "Ensure that everything is in good shape"
"10334.000": "Shut down"
---
location: "ray04"
number: "04"
title: "Loading sampled BRDF data"
markers:
"1.000": "Welcome to the stream"
"26.000": "Reacquaint ourselves with the ray tracer"
"86.000": "Default LANE_WIDTH to 8 if not defined on our build line"
"107.000": "Check out our 2017_10_22_Day01.txt performance dump"
"157.000": "Admire our 2017_11_19_Day08_8x.bmp image"
"214.000": "Determine to add some importance sampling and / or material properties"
"267.000": "Try to run the ray caster"
"359.000": "Reacquaint ourselves with CastSampleRays()"
"606.000": "Consider adding some exposure control"
"657.000": "Try increasing the redness of the 4th material's EmitColor from 4 to 20"
"682.000": "Run the program"
"697.000": "Admire our image with more red emittance"
"765.000": "Try increasing the redness of the 4th material's EmitColor from 20 to 50"
"772.000": "Run the program"
"782.000": "Admire our image with yet more red emittance"
"857.000": "Introduce a second plane"
"887.000": "Run the program"
"906.000": "Admire our image with two planes"
"952.000": "Try decreasing the d of the 2nd plane from 10 to 2"
"957.000": "Run the program"
"989.000": "Admire our image with the second plane cutting through the blue hemisphere"
"1031.000": "Determine to vary the light based on direction"
"1064.000": "Try adding some Green and Blue to the 4th material's EmitColor, and take RaysPerPixel as a command line argument"
"1093.000": "Run the program with and without passing a RaysPerPixel"
"1112.000": "Admire our image with orange emittance"
"1142.000": "Research Disney's standard BRDF (Bidirectional Reflectance Distribution Function)"
"1510.000": "Research reference implementations of Disney's Principled BRDF"
"1654.000": "Prepare to proceed, reading 2 "The microfacet model""
"1881.000": "Read 3 "Visualizing measured BDRFs", describing a gonioreflectometer and checking out MERL's BRDF database"
"2361.000": "Read 'A Data-Driven Reflectance Model'"
"2816.000": "Consult the BRDF reference implementation in MERL's BRDF database"
"2872.000": "Embark on our BRDF loader, introducing brdf_table and LoadMERLBinary()"
"3267.000": "Organise our MERL .binary files"
"3328.000": "Set up to call LoadMERLBinary(), changing it to handle three colour channels"
"3619.000": "Run the program, to see no progress printout"
"3813.000": "Run the program with 16 RaysPerPixel"
"3835.000": "Admire our test.bmp"
"3852.000": "Determine to sample the BRDF values, first learning about the colour scaling values"
"4121.000": "Change LoadMERLBinary() to read in the colour channels as per the reference implementation"
"4269.000": "Upgrade CastSampleRays() to attenuate by the BRDF-sampled reflectance colour, introducing BRDFLookup()"
"4526.000": "Implement BRDFLookup(), informed by the reference implementation and 'A Data-Driven Reflectance Model'"
"5345.000": "Coordinate System on a Sphere"
"5594.000": "Make CastSampleRays() generate a coordinate system for our sampling sphere, to pass to BRDFLookup()"
"5834.000": "Consult our documents on computation of the diff vector"
"5962.000": "Make BRDFLookup() compute ThetaHalf and PhiHalf, after mapping the LightDir and HalfVector in to the tangent space of the reflection"
"6216.000": "Make BRDFLookup() compute ThetaDiff"
"6344.000": "Come to understand the PhiDiff computation"
"6570.000": "Rename Bitangent to Binormal in plane"
"6705.000": "Locating a (Light) Vector in a Transformed Coordinate System"
"7072.000": "Efficiently locating a (Light) Vector in a Transformed Coordinate System"
"7477.000": "Make BRDFLookup() efficiently compute the PhiDiff"
"7810.000": "Introduce ExtractF32() for BRDFLookup() to call"
"8031.000": "Make BRDFLookup() look up the colour values"
"8517.000": "Begin to make BRDFLookup() index in to the BRDF table"
"8726.000": "Wonder if the squaring and rooting is correct"
"8914.000": "I = √t × R²"
"9014.000": "Finish making BRDFLookup() index in to the BRDF table"
"9436.000": "Run the program to find uninitialised Values"
"9521.000": "Introduce NullBRDF()"
"9625.000": "Run the program"
"9639.000": "Admire our test.bmp"
"9666.000": "Q&A"
"9708.000": "Q: When computing the sphere bitangent, could you just NOZ the tangent before computing the Bitangent so you don't have to NOZ the Bitangent afterwards?"
"9742.000": "Save BRDFLookup() from performing NOZ() on the DiffX, and make it perform NOZ() when initialising SphereTangent to save doing in on the SphereBinormal"
"9808.000": "Q: Talking about ray and Linux and more beautiful code, there is still a GitHub issue about memory loading in SIMD"
"9820.000": "Q: Is the BRDS essentially a function that tells us which rays within the hemisphere to use?"
"9833.000": "Q: Do you get "uncanny valley" impressions sometimes when looking at raytraced images? If so, what strategies might you have to mitigate that?"
"9868.000": "Q: BRDF, yes, typo, sorry"
"9921.000": "Q: Will you finish this tomorrow?"
"9931.000": "Q: The sound was fine and it was synced. Your camera frame rate seems low, though"
"9953.000": "Q: Have you thought about implementing GGX for Handmade Ray?"
"10012.000": "Q: How much of modern skin mesh animation did you contribute to?"
"10044.000": "Q: Haha, this is what I'm talking about"
"10166.000": "Q: Alright, thanks. But what function chooses the outgoing rays to use? Because it will affect the outcome of the picture. It gets fuzzier if the rays spread in more directions"
"10190.000": "Equally vs BRDF weighted sampling"
"10401.000": "Q: Did shader weighted skin mesh animation exist before you started meddling with it? How did it evolve, and do you see any future improvements possible on it?"
"10596.000": "Q: I see missed the start of the stream so didn't realize the dataset was a requirement. I don't know if there is set of measured GGX BRDFs. It is a very common BRDF used in offline pathtracing for film (and I think gaining popularity in the realtime world too). Thanks for the education streams!"
"10634.000": "Was the game Messiah?"
"10706.000": "Wrap it up"
---
